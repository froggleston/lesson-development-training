name: "01 Maintain: Build and Deploy Site"

on:
  push:
    branches:
      - main
  schedule:
    - cron: '0 0 * * 2'
  workflow_dispatch:
    inputs:
      name:
        description: 'Who triggered this build?'
        required: true
        default: 'Maintainer (via GitHub)'
      CACHE_VERSION:
        description: 'Optional renv cache version override'
        required: false
        default: ''
      reset:
        description: 'Reset cached markdown files'
        required: false
        default: false
        type: boolean
      skip_manage_deps:
        description: 'Skip build-time dependency management'
        required: false
        default: true
        type: boolean
  workflow_run:
    workflows: ["03 Maintain: Apply Package Cache"]
    types:
      - completed

jobs:
  preflight:
    name: "Preflight: Schedule, Push, or PR?"
    runs-on: ubuntu-latest
    outputs:
      do-build: ${{ steps.build-check.outputs.do-build }}
      renv-needed: ${{ steps.build-check.outputs.renv-needed }}
      renv-cache-hashsum: ${{ steps.build-check.outputs.renv-cache-hashsum || '' }}
      workbench-container-file-exists: ${{ steps.wb-vers.outputs.workbench-container-file-exists }}
      wb-vers: ${{ steps.wb-vers.outputs.container-version }}
      last-wb-vers: ${{ steps.wb-vers.outputs.last-container-version }}
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: "Should we run build and deploy?"
        id: build-check
        uses: carpentries/actions/build-preflight@frog-s3-test-1
        with:
          CACHE_VERSION: ${{ secrets.CACHE_VERSION || vars.CACHE_VERSION || github.event.inputs.CACHE_VERSION || '' }}
          WORKBENCH_TAG: ${{ vars.WORKBENCH_TAG || 'latest' }}

      - name: Get container version used
        id: wb-vers
        if: ${{ steps.build-check.outputs.do-build == 'true' }}
        uses: carpentries/actions/container-version@frog-s3-test-1
        with:
          WORKBENCH_TAG: ${{ vars.WORKBENCH_TAG }}

  verify-wb:
    name: "Verify Workbench Version"
    runs-on: ubuntu-latest
    outputs:
      workbench-update: ${{ steps.trigger-cache-update.outputs.workbench-update }}
    needs: [preflight]
    if: ${{ needs.preflight.outputs.renv-needed == 'true' }}
    steps:
      - name: "Checkout Lesson"
        uses: actions/checkout@v4

      - name: "Trigger Update Cache Workflow?"
        id: trigger-cache-update
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Compare current and last workbench versions #
          if [[ ${{ needs.preflight.outputs.wb-vers != needs.preflight.outputs.last-wb-vers }} ]]; then
            echo "workbench-update=true" >> "$GITHUB_OUTPUT"
            gh workflow run update-cache.yaml
          else
            echo "workbench-update=false" >> "$GITHUB_OUTPUT"
          fi
        shell: bash

  full-build:
    name: "Build Full Site"
    runs-on: ubuntu-latest
    needs: [preflight, verify-wb]
    if: always() && ${{ needs.preflight.outputs.do-build == 'true' && needs.verify-wb.outputs.workbench-update != 'true' }}
    env:
        RENV_EXISTS: ${{ needs.preflight.outputs.renv-needed }}
        RENV_HASH: ${{ needs.preflight.outputs.renv-cache-hashsum }}
    permissions:
      checks: write
      contents: write
      pages: write
      id-token: write # OIDC permission required
    container:
      image: carpentries/workbench-docker:${{ vars.WORKBENCH_TAG || 'latest' }}
      env:
        WORKBENCH_PROFILE: "ci"
        GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
        RENV_PATHS_ROOT: /home/rstudio/lesson/renv
        RENV_PROFILE: "lesson-requirements"
        RENV_CONFIG_EXTERNAL_LIBRARIES: "/usr/local/lib/R/site-library"
      volumes:
        - ${{ github.workspace }}:/home/rstudio/lesson
      options: --cpus 1
    steps:
      - name: "Checkout Lesson"
        uses: actions/checkout@v4

      - name: "Debugging Info"
        run: |
          cd /home/rstudio/lesson
          echo "Current Directory: $(pwd)"
          echo "RENV_HASH is $RENV_HASH"
          ls -lah /home/rstudio/.workbench
          ls -lah $(pwd)
          Rscript -e 'sessionInfo()'

      - name: "Mark Repository as Safe"
        run: |
          git config --global --add safe.directory $(pwd)

      - name: "Setup Lesson Dependencies"
        id: build-container-deps
        uses: carpentries/actions/build-container-deps@frog-s3-test-1
        with:
          CACHE_VERSION: ${{ secrets.CACHE_VERSION || vars.CACHE_VERSION || github.event.inputs.CACHE_VERSION || '' }}
          WORKBENCH_TAG: ${{ vars.WORKBENCH_TAG || 'latest' }}
          LESSON_PATH: ${{ vars.LESSON_PATH || '/home/rstudio/lesson' }}
          role-to-assume: ${{ secrets.AWS_GH_OIDC_ARN }}
          aws-region: ${{ secrets.AWS_GH_OIDC_REGION }}

      - name: Run Container and Build Site
        id: build-and-deploy
        run: |
          library(sandpaper)
          reset <- "${{ github.event.inputs.reset }}" == "true"
          skip_manage_deps <- "${{ github.event.inputs.skip_manage_deps }}" == "true"
          sandpaper::package_cache_trigger(TRUE)
          sandpaper:::ci_deploy(reset = reset, skip_manage_deps = skip_manage_deps)
        shell: Rscript {0}

  update-container-version:
    name: "Update container version used"
    runs-on: ubuntu-latest
    needs: [preflight, full-build]
    if: always() && ${{ needs.preflight.outputs.workbench-container-file-exists == 'false' || (needs.full-build.build-and-deploy.outcome == 'success' && needs.preflight.outputs.wb-vers != needs.preflight.outputs.last-wb-vers) }}
    steps:
      - name: Record container version used
        uses: carpentries/actions/record-container-version@frog-s3-test-1
        with:
          CONTAINER_VER: ${{ needs.preflight.outputs.wb-vers }}
